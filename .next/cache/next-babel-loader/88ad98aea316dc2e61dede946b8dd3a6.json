{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var initialState = {\n  isLoggedIn: false,\n  userInfo: {\n    userId: '',\n    userName: '',\n    classification: ''\n  }\n};\nexport var LOG_IN = 'LOG_IN';\nexport var LOG_OUT = 'LOG_OUT'; // action creator => action 객체를 리턴하도록 함수화\n\nexport var login = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(form) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.post('/login', form).then(function (res) {\n              var result = res.data;\n\n              if (result.success == 'true') {\n                axios.defaults.headers.common['Authorization'] = \"Bearer \".concat(result.access_token);\n                return {\n                  userId: result.user_id,\n                  userName: result.user_name,\n                  classification: result.classification\n                };\n              } else {\n                switch (result.message) {\n                  case 'invalid id':\n                    alert('유효하지 않은 아이디입니다.');\n                    break;\n\n                  case 'invalid pw':\n                    alert('비밀번호가 틀렸습니다.');\n                    break;\n\n                  case 'invalid class':\n                    alert('유효하지 않은 아이디입니다.');\n                    break;\n\n                  default:\n                    alert('msg err');\n                }\n              }\n            })[\"catch\"](function (err) {\n              console.log(err);\n              alert('로그인에 실패했습니다. : ' + err);\n            });\n\n          case 2:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              type: LOG_IN,\n              data: data\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function login(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // (이전상태, 액션) => 다음상태\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN:\n      return {\n        isLoggedIn: true,\n        userInfo: action.data\n      };\n\n    case LOG_OUT:\n      return {\n        isLoggedIn: false,\n        userInfo: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/taeeun/Desktop/Programming/Projects/MrDaeBak/MrDaeBak_front/reducers/user.js"],"names":["initialState","isLoggedIn","userInfo","userId","userName","classification","LOG_IN","LOG_OUT","login","form","axios","post","then","res","result","data","success","defaults","headers","common","access_token","user_id","user_name","message","alert","err","console","log","type","reducer","state","action"],"mappings":";;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAE,KADY;AAExBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,MAAM,EAAE,EADF;AAENC,IAAAA,QAAQ,EAAE,EAFJ;AAGNC,IAAAA,cAAc,EAAE;AAHV;AAFc,CAArB;AASP,OAAO,IAAMC,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB,C,CAEP;;AACA,OAAO,IAAMC,KAAK;AAAA,sEAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACEC,KAAK,CAACC,IAAN,CAAW,QAAX,EAAqBF,IAArB,EACNG,IADM,CACD,UAAAC,GAAG,EAAI;AACT,kBAAMC,MAAM,GAAGD,GAAG,CAACE,IAAnB;;AAEA,kBAAGD,MAAM,CAACE,OAAP,IAAkB,MAArB,EAA6B;AACzBN,gBAAAA,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,qBAA2DL,MAAM,CAACM,YAAlE;AACA,uBAAO;AACHjB,kBAAAA,MAAM,EAAEW,MAAM,CAACO,OADZ;AAEHjB,kBAAAA,QAAQ,EAAEU,MAAM,CAACQ,SAFd;AAGHjB,kBAAAA,cAAc,EAAES,MAAM,CAACT;AAHpB,iBAAP;AAKH,eAPD,MAOO;AACH,wBAAOS,MAAM,CAACS,OAAd;AACI,uBAAK,YAAL;AACIC,oBAAAA,KAAK,CAAC,iBAAD,CAAL;AACA;;AACJ,uBAAK,YAAL;AACIA,oBAAAA,KAAK,CAAC,cAAD,CAAL;AACA;;AACJ,uBAAK,eAAL;AACIA,oBAAAA,KAAK,CAAC,iBAAD,CAAL;AACA;;AACJ;AACIA,oBAAAA,KAAK,CAAC,SAAD,CAAL;AAXR;AAaH;AACJ,aA1BM,WA2BA,UAAAC,GAAG,EAAI;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAD,cAAAA,KAAK,CAAC,oBAAoBC,GAArB,CAAL;AACH,aA9BM,CADF;;AAAA;AACXV,YAAAA,IADW;AAAA,6CAiCV;AACHa,cAAAA,IAAI,EAAEtB,MADH;AAEHS,cAAAA,IAAI,EAAJA;AAFG,aAjCU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAALP,KAAK;AAAA;AAAA;AAAA,GAAX,C,CAuCP;;AACA,IAAMqB,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzB9B,YAAyB;AAAA,MAAX+B,MAAW;;AAC9C,UAAOA,MAAM,CAACH,IAAd;AACI,SAAKtB,MAAL;AACI,aAAO;AACHL,QAAAA,UAAU,EAAE,IADT;AAEHC,QAAAA,QAAQ,EAAE6B,MAAM,CAAChB;AAFd,OAAP;;AAIJ,SAAKR,OAAL;AACI,aAAO;AACHN,QAAAA,UAAU,EAAE,KADT;AAEHC,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ;AACI,aAAO4B,KAAP;AAZR;AAcH,CAfD;;AAiBA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n    isLoggedIn: false,\n    userInfo: {\n        userId: '',\n        userName: '',\n        classification: ''\n    },  \n};\n\nexport const LOG_IN = 'LOG_IN';\nexport const LOG_OUT = 'LOG_OUT';\n\n// action creator => action 객체를 리턴하도록 함수화\nexport const login = async (form) => {\n    const data = await axios.post('/login', form)\n                .then(res => {\n                    const result = res.data;\n\n                    if(result.success == 'true') {\n                        axios.defaults.headers.common['Authorization'] = `Bearer ${result.access_token}`;\n                        return {\n                            userId: result.user_id,\n                            userName: result.user_name,\n                            classification: result.classification\n                        }\n                    } else {\n                        switch(result.message) {\n                            case 'invalid id':\n                                alert('유효하지 않은 아이디입니다.');\n                                break;\n                            case 'invalid pw':\n                                alert('비밀번호가 틀렸습니다.');\n                                break;\n                            case 'invalid class':\n                                alert('유효하지 않은 아이디입니다.');\n                                break;\n                            default:\n                                alert('msg err');\n                        }\n                    }\n                })\n                .catch(err => {\n                    console.log(err);\n                    alert('로그인에 실패했습니다. : ' + err);\n                });\n\n    return {\n        type: LOG_IN,\n        data,\n    }\n}\n\n// (이전상태, 액션) => 다음상태\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case LOG_IN:\n            return {\n                isLoggedIn: true,\n                userInfo: action.data,\n            };\n        case LOG_OUT:\n            return {\n                isLoggedIn: false,\n                userInfo: null,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}