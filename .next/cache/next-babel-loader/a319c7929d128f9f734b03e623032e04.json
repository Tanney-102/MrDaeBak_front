{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nexport var initialState = {\n  isLoggedIn: false,\n  userInfo: {\n    userId: '',\n    userName: '',\n    classification: ''\n  }\n};\nexport var LOG_IN = 'LOG_IN';\nexport var LOG_OUT = 'LOG_OUT'; // action creator => action 객체를 리턴하도록 함수화\n\nexport var loginRequest = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(form) {\n    var type, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            type = '';\n            data = {\n              userId: '',\n              userName: '',\n              classification: ''\n            };\n            _context.next = 4;\n            return axios.post('/login', form).then(function (res) {\n              var result = res.data;\n\n              if (result.success == 'true') {\n                localStorage.Token = result.access_token;\n                type = LOG_IN;\n                data.userId = result.user_id, data.userName = result.user_name, data.classification = result.classification;\n              } else {\n                switch (result.message) {\n                  case 'invalid id':\n                    alert('유효하지 않은 아이디입니다.');\n                    break;\n\n                  case 'invalid pw':\n                    alert('비밀번호가 틀렸습니다.');\n                    break;\n\n                  case 'invalid class':\n                    alert('유효하지 않은 아이디입니다.');\n                    break;\n\n                  default:\n                    alert('msg err');\n                }\n              }\n            })[\"catch\"](function (err) {\n              console.log(err);\n              alert('로그인에 실패했습니다. : ' + err);\n            });\n\n          case 4:\n            return _context.abrupt(\"return\", {\n              type: type,\n              data: data\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loginRequest(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var verifyLoginState = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var action;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.get('/login', {\n              headers: {\n                Authorization: \"Bearer \".concat(localStorage.Token)\n              }\n            }).then(function (res) {\n              var result = res.data;\n\n              if (result.logged_in === 'false') {\n                return {\n                  type: '',\n                  data: {\n                    userId: '',\n                    userName: '',\n                    classification: ''\n                  }\n                };\n              }\n\n              return {\n                type: LOG_IN,\n                data: {\n                  userId: result.user_id,\n                  userName: result.user_name,\n                  classification: result.classification\n                }\n              };\n            })[\"catch\"](function (err) {\n              console.log(err);\n            });\n\n          case 2:\n            action = _context2.sent;\n            return _context2.abrupt(\"return\", action);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function verifyLoginState() {\n    return _ref2.apply(this, arguments);\n  };\n}(); // (이전상태, 액션) => 다음상태\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN:\n      return {\n        isLoggedIn: true,\n        userInfo: action.data\n      };\n\n    case LOG_OUT:\n      return {\n        isLoggedIn: false,\n        userInfo: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/taeeun/Desktop/Programming/Projects/MrDaeBak/MrDaeBak_front/reducers/user.js"],"names":["axios","initialState","isLoggedIn","userInfo","userId","userName","classification","LOG_IN","LOG_OUT","loginRequest","form","type","data","post","then","res","result","success","localStorage","Token","access_token","user_id","user_name","message","alert","err","console","log","verifyLoginState","get","headers","Authorization","logged_in","action","reducer","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAE,KADY;AAExBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,MAAM,EAAE,EADF;AAENC,IAAAA,QAAQ,EAAE,EAFJ;AAGNC,IAAAA,cAAc,EAAE;AAHV;AAFc,CAArB;AASP,OAAO,IAAMC,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB,C,CAEP;;AACA,OAAO,IAAMC,YAAY;AAAA,sEAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,YAAAA,IADoB,GACb,EADa;AAElBC,YAAAA,IAFkB,GAEX;AACTR,cAAAA,MAAM,EAAE,EADC;AAETC,cAAAA,QAAQ,EAAE,EAFD;AAGTC,cAAAA,cAAc,EAAE;AAHP,aAFW;AAAA;AAAA,mBAQlBN,KAAK,CAACa,IAAN,CAAW,QAAX,EAAqBH,IAArB,EACDI,IADC,CACI,UAAAC,GAAG,EAAI;AACT,kBAAMC,MAAM,GAAGD,GAAG,CAACH,IAAnB;;AAEA,kBAAGI,MAAM,CAACC,OAAP,IAAkB,MAArB,EAA6B;AACzBC,gBAAAA,YAAY,CAACC,KAAb,GAAqBH,MAAM,CAACI,YAA5B;AAEAT,gBAAAA,IAAI,GAAGJ,MAAP;AACAK,gBAAAA,IAAI,CAACR,MAAL,GAAcY,MAAM,CAACK,OAArB,EACAT,IAAI,CAACP,QAAL,GAAgBW,MAAM,CAACM,SADvB,EAEAV,IAAI,CAACN,cAAL,GAAsBU,MAAM,CAACV,cAF7B;AAGH,eAPD,MAOO;AACH,wBAAOU,MAAM,CAACO,OAAd;AACI,uBAAK,YAAL;AACIC,oBAAAA,KAAK,CAAC,iBAAD,CAAL;AACA;;AACJ,uBAAK,YAAL;AACIA,oBAAAA,KAAK,CAAC,cAAD,CAAL;AACA;;AACJ,uBAAK,eAAL;AACIA,oBAAAA,KAAK,CAAC,iBAAD,CAAL;AACA;;AACJ;AACIA,oBAAAA,KAAK,CAAC,SAAD,CAAL;AAXR;AAaH;AACJ,aA1BC,WA2BK,UAAAC,GAAG,EAAI;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAD,cAAAA,KAAK,CAAC,oBAAoBC,GAArB,CAAL;AACH,aA9BC,CARkB;;AAAA;AAAA,6CAwCjB;AACHd,cAAAA,IAAI,EAAJA,IADG;AAEHC,cAAAA,IAAI,EAAJA;AAFG,aAxCiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZH,YAAY;AAAA;AAAA;AAAA,GAAlB;AA8CP,OAAO,IAAMmB,gBAAgB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACP5B,KAAK,CAAC6B,GAAN,CAAU,QAAV,EAAoB;AACjCC,cAAAA,OAAO,EAAG;AACNC,gBAAAA,aAAa,mBAAYb,YAAY,CAACC,KAAzB;AADP;AADuB,aAApB,EAKhBL,IALgB,CAKX,UAAAC,GAAG,EAAI;AACT,kBAAMC,MAAM,GAAGD,GAAG,CAACH,IAAnB;;AAEA,kBAAGI,MAAM,CAACgB,SAAP,KAAqB,OAAxB,EAAiC;AAC7B,uBAAO;AAAErB,kBAAAA,IAAI,EAAG,EAAT;AAAaC,kBAAAA,IAAI,EAAG;AAAER,oBAAAA,MAAM,EAAC,EAAT;AAAaC,oBAAAA,QAAQ,EAAC,EAAtB;AAA0BC,oBAAAA,cAAc,EAAC;AAAzC;AAApB,iBAAP;AACH;;AAED,qBAAO;AACHK,gBAAAA,IAAI,EAAGJ,MADJ;AAEHK,gBAAAA,IAAI,EAAG;AACHR,kBAAAA,MAAM,EAAGY,MAAM,CAACK,OADb;AAEHhB,kBAAAA,QAAQ,EAAGW,MAAM,CAACM,SAFf;AAGHhB,kBAAAA,cAAc,EAAGU,MAAM,CAACV;AAHrB;AAFJ,eAAP;AAQH,aApBgB,WAqBV,UAAAmB,GAAG,EAAI;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,aAvBgB,CADO;;AAAA;AACtBQ,YAAAA,MADsB;AAAA,8CA0BrBA,MA1BqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBL,gBAAgB;AAAA;AAAA;AAAA,GAAtB,C,CA6BP;;AACA,IAAMM,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBlC,YAAyB;AAAA,MAAXgC,MAAW;;AAC9C,UAAOA,MAAM,CAACtB,IAAd;AACI,SAAKJ,MAAL;AACI,aAAO;AACHL,QAAAA,UAAU,EAAE,IADT;AAEHC,QAAAA,QAAQ,EAAE8B,MAAM,CAACrB;AAFd,OAAP;;AAIJ,SAAKJ,OAAL;AACI,aAAO;AACHN,QAAAA,UAAU,EAAE,KADT;AAEHC,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ;AACI,aAAOgC,KAAP;AAZR;AAcH,CAfD;;AAiBA,eAAeD,OAAf","sourcesContent":["import axios from 'axios';\n\nexport const initialState = {\n    isLoggedIn: false,\n    userInfo: {\n        userId: '',\n        userName: '',\n        classification: ''\n    },  \n};\n\nexport const LOG_IN = 'LOG_IN';\nexport const LOG_OUT = 'LOG_OUT';\n\n// action creator => action 객체를 리턴하도록 함수화\nexport const loginRequest = async (form) => {\n    let type = ''\n    const data = {\n        userId: '',\n        userName: '',\n        classification: '',\n    };\n\n    await axios.post('/login', form)\n        .then(res => {\n            const result = res.data;\n\n            if(result.success == 'true') {\n                localStorage.Token = result.access_token;\n\n                type = LOG_IN;\n                data.userId = result.user_id,\n                data.userName = result.user_name,\n                data.classification = result.classification\n            } else {\n                switch(result.message) {\n                    case 'invalid id':\n                        alert('유효하지 않은 아이디입니다.');\n                        break;\n                    case 'invalid pw':\n                        alert('비밀번호가 틀렸습니다.');\n                        break;\n                    case 'invalid class':\n                        alert('유효하지 않은 아이디입니다.');\n                        break;\n                    default:\n                        alert('msg err');\n                }\n            }\n        })\n        .catch(err => {\n            console.log(err);\n            alert('로그인에 실패했습니다. : ' + err);\n        });\n\n    return {\n        type,\n        data,\n    }\n};\n\nexport const verifyLoginState = async () => {\n    const action = await axios.get('/login', {\n            headers : {\n                Authorization: `Bearer ${localStorage.Token}`,\n            }\n        })\n        .then(res => {\n            const result = res.data;\n\n            if(result.logged_in === 'false') {\n                return { type : '', data : { userId:'', userName:'', classification:'' } }\n            }\n\n            return {\n                type : LOG_IN,\n                data : {\n                    userId : result.user_id,\n                    userName : result.user_name,\n                    classification : result.classification,\n                }\n            }\n        })\n        .catch(err => {\n            console.log(err);\n        });\n\n    return action;\n};\n\n// (이전상태, 액션) => 다음상태\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case LOG_IN:\n            return {\n                isLoggedIn: true,\n                userInfo: action.data,\n            };\n        case LOG_OUT:\n            return {\n                isLoggedIn: false,\n                userInfo: null,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}