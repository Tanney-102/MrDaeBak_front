{"ast":null,"code":"import axios from 'axios';\nexport const initialState = {\n  isLoggedIn: false,\n  userInfo: {\n    userId: '',\n    userName: '',\n    classification: '',\n    address: ''\n  }\n};\nexport const LOG_IN = 'LOG_IN';\nexport const LOG_OUT = 'LOG_OUT'; // action creator => action 객체를 리턴하도록 함수화\n\nexport const loginRequest = async form => {\n  let type = '';\n  const data = {\n    userId: '',\n    userName: '',\n    classification: '',\n    address: ''\n  };\n  await axios.post('/login', form).then(res => {\n    const result = res.data;\n\n    if (result.success == 'true') {\n      localStorage.Token = result.access_token;\n      type = LOG_IN;\n      data.userId = result.user_id;\n      data.userName = result.user_name;\n      data.classification = result.classification;\n      data.address = result.address;\n    } else {\n      switch (result.message) {\n        case 'invalid id':\n          alert('유효하지 않은 아이디입니다.');\n          break;\n\n        case 'invalid pw':\n          alert('비밀번호가 틀렸습니다.');\n          break;\n\n        case 'invalid class':\n          alert('유효하지 않은 아이디입니다.');\n          break;\n\n        default:\n          alert('msg err');\n      }\n    }\n  }).catch(err => {\n    console.log(err);\n    alert('로그인에 실패했습니다. : ' + err);\n  });\n  return {\n    type,\n    data\n  };\n};\nexport const verifyLoginState = async () => {\n  const config = {\n    headers: localStorage.Token ? {\n      Authorization: localStorage.Token\n    } : {}\n  };\n  const action = await axios.get('/login', config).then(res => {\n    const result = res.data;\n\n    if (result.logged_in === 'false') {\n      return {\n        type: '',\n        data: {\n          userId: '',\n          userName: '',\n          classification: ''\n        }\n      };\n    }\n\n    return {\n      type: LOG_IN,\n      data: {\n        userId: result.user_id,\n        userName: result.user_name,\n        classification: result.classification\n      }\n    };\n  }).catch(err => {\n    console.log(err);\n  });\n  return action;\n};\nexport const logoutRequest = () => {\n  return {\n    type: LOG_OUT\n  };\n}; // (이전상태, 액션) => 다음상태\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      return {\n        isLoggedIn: true,\n        userInfo: action.data\n      };\n\n    case LOG_OUT:\n      return {\n        isLoggedIn: false,\n        userInfo: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/taeeun/Desktop/Programming/Projects/MrDaeBak/MrDaeBak_front/reducers/user.js"],"names":["axios","initialState","isLoggedIn","userInfo","userId","userName","classification","address","LOG_IN","LOG_OUT","loginRequest","form","type","data","post","then","res","result","success","localStorage","Token","access_token","user_id","user_name","message","alert","catch","err","console","log","verifyLoginState","config","headers","Authorization","action","get","logged_in","logoutRequest","reducer","state"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport const initialState = {\n    isLoggedIn: false,\n    userInfo: {\n        userId: '',\n        userName: '',\n        classification: '',\n        address: '',\n    },  \n};\n\nexport const LOG_IN = 'LOG_IN';\nexport const LOG_OUT = 'LOG_OUT';\n\n// action creator => action 객체를 리턴하도록 함수화\nexport const loginRequest = async (form) => {\n    let type = ''\n    const data = {\n        userId: '',\n        userName: '',\n        classification: '',\n        address: '',\n    };\n\n    await axios.post('/login', form)\n        .then(res => {\n            const result = res.data;\n\n            if(result.success == 'true') {\n                localStorage.Token = result.access_token;\n                type = LOG_IN;\n                data.userId = result.user_id;\n                data.userName = result.user_name;\n                data.classification = result.classification;\n                data.address = result.address;\n            } else {\n                switch(result.message) {\n                    case 'invalid id':\n                        alert('유효하지 않은 아이디입니다.');\n                        break;\n                    case 'invalid pw':\n                        alert('비밀번호가 틀렸습니다.');\n                        break;\n                    case 'invalid class':\n                        alert('유효하지 않은 아이디입니다.');\n                        break;\n                    default:\n                        alert('msg err');\n                }\n            }\n        })\n        .catch(err => {\n            console.log(err);\n            alert('로그인에 실패했습니다. : ' + err);\n        });\n\n    return {\n        type,\n        data,\n    }\n};\n\nexport const verifyLoginState = async () => {\n\n    const config = {\n        headers: localStorage.Token ? { Authorization: localStorage.Token } : {}\n    }\n\n    const action = await axios.get('/login', config)\n        .then(res => {\n            const result = res.data;\n\n            if(result.logged_in === 'false') {\n                return { type : '', data : { userId:'', userName:'', classification:'' } }\n            }\n\n            return {\n                type : LOG_IN,\n                data : {\n                    userId : result.user_id,\n                    userName : result.user_name,\n                    classification : result.classification,\n                }\n            }\n        })\n        .catch(err => {\n            console.log(err);\n        });\n\n    return action;\n};\n\nexport const logoutRequest = () => {\n    return {\n        type: LOG_OUT\n    }\n};\n\n// (이전상태, 액션) => 다음상태\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case LOG_IN:\n            return {\n                isLoggedIn: true,\n                userInfo: action.data,\n            };\n        case LOG_OUT:\n            return {\n                isLoggedIn: false,\n                userInfo: null,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}